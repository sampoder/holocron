{"version":3,"sources":["../../src/index.js","App.js","index.js"],"names":["Holocron","props","stickyValue","window","JSON","React","key","value","handle","useFullScreenHandle","useStickyState","useState","bg","backgroundColor","h","overflow","w","p","pt","up","pb","down","pr","right","pl","left","launched","minHeight","maxHeight","borderRadius","display","mb","onClick","setLeft","aria-label","icon","flex","align","alignItems","justifyContent","mt","disabled","setUp","setLaunched","mr","setDown","setRight","Home","title","style","color","launch","fullscreen","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.593286e3.chunk.js","sourcesContent":["import {\n  Box,\n  Flex,\n  Center,\n  IconButton,\n  ChakraProvider,\n} from \"@chakra-ui/react\";\n\nimport {\n  ArrowBackIcon,\n  ArrowForwardIcon,\n  ArrowDownIcon,\n  ArrowUpIcon,\n} from \"@chakra-ui/icons\";\n\nimport React, { useState } from \"react\";\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\n\nexport default Holocron = ({\n  launch,\n  fullscreen,\n  title,\n  backgroundColor,\n  ...props\n}) => {\n  function useStickyState(defaultValue, key) {\n    const [value, setValue] = React.useState(() => {\n      const stickyValue = window.localStorage.getItem(key);\n      return stickyValue !== null ? JSON.parse(stickyValue) : defaultValue;\n    });\n    React.useEffect(() => {\n      window.localStorage.setItem(key, JSON.stringify(value));\n    }, [key, value]);\n    return [value, setValue];\n  }\n  const handle = useFullScreenHandle();\n  const [up, setUp] = useStickyState(15, \"holocronUpValue\");\n  const [down, setDown] = useStickyState(15, \"holocronDownValue\");\n  const [left, setLeft] = useStickyState(30, \"holocronLeftValue\");\n  const [right, setRight] = useStickyState(15, \"holocronRightValue\");\n  const [launched, setLaunched] = useState(false);\n\n  return (\n    <ChakraProvider>\n      <FullScreen handle={handle}>\n        <Box bg={`${backgroundColor}`}>\n          <Flex h=\"100vh\" overflow=\"hidden\">\n            <Box\n              w={`${100}%`}\n              p={1}\n              pt={up + \"vh\"}\n              pb={down + \"vh\"}\n              pr={right + \"vh\"}\n              pl={left + \"vh\"}\n              h=\"100vh\"\n            >\n              {!launched ? (\n                <Box w=\"100%\" h=\"100%\" bg=\"black\" borderRadius={3}>\n                  <Flex>\n                    <Center\n                      w=\"10px\"\n                      maxHeight={`calc(100vh - 0.5rem - ${up}vh - ${down}vh)`}\n                    >\n                      <Box display=\"grid\">\n                        <IconButton\n                          mb={3}\n                          onClick={() => setLeft(left - 1)}\n                          aria-label=\"Expand Left\"\n                          icon={<ArrowBackIcon />}\n                        />\n                        <IconButton\n                          onClick={() => setLeft(left + 1)}\n                          aria-label=\"Expand Left\"\n                          icon={<ArrowForwardIcon />}\n                        />\n                      </Box>\n                    </Center>\n                    <Box flex=\"1\">\n                      <Box\n                        flex=\"1\"\n                        h=\"10px\"\n                        align=\"center\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                      >\n                        <Box mt=\"-15px\">\n                          <IconButton\n                            mr={3}\n                            aria-label=\"Expand Up\"\n                            {...(up <= 0 && { disabled: true })}\n                            onClick={() => setUp(up - 1)}\n                            icon={<ArrowUpIcon />}\n                          />\n                          <IconButton\n                            aria-label=\"Expand Down\"\n                            onClick={() => setUp(up + 1)}\n                            icon={<ArrowDownIcon />}\n                          />\n                        </Box>\n                      </Box>\n                      <Center\n                        flex=\"1\"\n                        mt=\"10px\"\n                        h={`calc(100vh - 0.5rem  - 25px - ${up}vh - ${down}vh)`}\n                      >\n                        <Box display=\"grid\">\n                          {title}\n                          <Flex pt={2}>\n                            <Box onClick={() => setLaunched(true)} pr={2}>\n                              {launch}\n                            </Box>\n                            <Box onClick={handle.enter} pl={2}>\n                              {fullscreen}\n                            </Box>\n                          </Flex>\n                        </Box>\n                      </Center>\n                      <Box\n                        flex=\"1\"\n                        mb=\"20px\"\n                        h=\"10px\"\n                        align=\"center\"\n                        alignItems=\"center\"\n                        justifyContent=\"center\"\n                      >\n                        <Box mb=\"30px\">\n                          <IconButton\n                            mr={3}\n                            aria-label=\"Expand Up\"\n                            onClick={() => setDown(down + 1)}\n                            icon={<ArrowUpIcon />}\n                          />\n                          <IconButton\n                            aria-label=\"Expand Down\"\n                            {...(down <= 0 && { disabled: true })}\n                            onClick={() => setDown(down - 1)}\n                            icon={<ArrowDownIcon />}\n                          />\n                        </Box>\n                      </Box>\n                    </Box>\n                    <Center\n                      w=\"10px\"\n                      maxHeight={`calc(100vh - 0.5rem - ${up}vh - ${down}vh)`}\n                    >\n                      <Box display=\"grid\">\n                        <IconButton\n                          mb={3}\n                          aria-label=\"Expand Right\"\n                          onClick={() => setRight(right + 1)}\n                          icon={<ArrowBackIcon />}\n                        />\n                        <IconButton\n                          aria-label=\"Expand Right\"\n                          onClick={() => setRight(right - 1)}\n                          {...(right <= 0 && { disabled: true })}\n                          icon={<ArrowForwardIcon />}\n                        />\n                      </Box>\n                    </Center>\n                  </Flex>\n                </Box>\n              ) : (\n                <Flex>\n                  <Box\n                    w=\"50%\"\n                    h=\"100%\"\n                    minHeight={`calc(100vh - ${up}vh - ${down}vh)`}\n                    maxHeight={`calc(100vh - ${up}vh - ${down}vh)`}\n                    overflow=\"hidden\"\n                    bg=\"black\"\n                  >\n                    {props.children}\n                  </Box>\n                  <Box\n                    w=\"50%\"\n                    h=\"100%\"\n                    minHeight={`calc(100vh - ${up}vh - ${down}vh)`}\n                    maxHeight={`calc(100vh - ${up}vh - ${down}vh)`}\n                    overflow=\"hidden\"\n                    bg=\"black\"\n                  >\n                    {props.children}\n                  </Box>\n                </Flex>\n              )}\n            </Box>\n          </Flex>\n        </Box>\n      </FullScreen>\n    </ChakraProvider>\n  );\n};","import React from 'react'\n\nimport Holocron from '@sampoder/holocron'\n\nexport default function Home() {\n  return (\n    <Holocron\n      title={<h1 style={{color: \"white\"}}>The Hello World!</h1>}\n      backgroundColor=\"#00FF00\"\n      launch={<button style={{color: \"white\"}}>►</button>}\n      fullscreen={<button style={{color: \"white\"}}>☒</button>}\n    >\n      <p style={{color: \"white\"}}>Sam</p>\n    </Holocron>\n  );\n}\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}